#!/usr/bin/env ruby
##########################################################################
# Copyright (C) Kovács Ákos - 2018                                       #
#                                                                        #
# Assembly exception/interrupt wrapper generator                         #
##########################################################################

INT_HANDLER    = '__int_handler'
INT_VECTOR     = '__int_vector'
INT_WRAPPER    = '__int_handle_'
SPACES         = " " * 4
FILE_NAME      = "../sys/core/int_wrappers.asm"

# List of interrupts with error codes
INT_ECODES     = [8, 10, 11, 12, 13, 14, 17]

file_name = FILE_NAME
if ARGV.count > 0
    file_name = ARGV[0]
end

File.open file_name, 'w' do |iw|
    iw.puts "; Assembly wrapper subroutines for all possible interrupts"
    iw.puts "; Automatically generated by scripts/#{__FILE__}, at #{Time.now.asctime}"
    iw.puts "; DO NOT MODIFY!\n\n"
    # The main, global interrupt handler has to be seen from here
    iw.puts "extern #{INT_HANDLER}\n\n"

    # Create a subroutine for each interrupt
    iw.puts "section .text\n\n"
    (0..255).each do |inum|
        sub_name = "#{INT_WRAPPER}#{inum}"
        iw.puts "global #{sub_name}"
        iw.puts "#{sub_name}:"
        iw.puts "#{SPACES}push 0x0" unless INT_ECODES.include?(inum)
        # Push the current interrupt's number
        iw.puts "#{SPACES}push #{inum}"
        iw.puts "#{SPACES}jmp #{INT_HANDLER}\n\n"
    end

    # Generate the full table (vector) of the interrupt handlers from above
    iw.puts "section .rodata"
    iw.puts "global #{INT_VECTOR}"
    iw.puts "#{INT_VECTOR}:"
    (0..255).each do |inum|
        iw.puts "#{SPACES}dq #{INT_WRAPPER}#{inum}"
    end
    iw.puts ""
end
